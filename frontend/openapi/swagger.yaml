openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /makePayment/{id}:
    put:
      tags:
        - payment-controller
      summary: Make the payment. Payment and code can not be NULL.
      operationId: makePayment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: Payment successfully completed.
          content:
            application/json: {}
        '400':
          description: Unsuccessful payment operation. Check data and try again.
          content:
            '*/*':
              schema:
                type: object
        '404':
          description: Payment with given id does not exist.
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: User already paid for the payment.
          content:
            '*/*':
              schema:
                type: object
  /toll:
    get:
      tags:
      - payment-controller
      summary: Get the toll list
      operationId: getTool
      responses:
        "200":
          description: Found the toll list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TollDTO'
    post:
      tags:
      - payment-controller
      summary: "Create or update toll. When toll's id == null, system creates new\
        \ toll.Otherwise system gets toll from DB with id == toll.id and updates all\
        \ fields."
      operationId: addOrEditTool
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TollDTO'
        required: true
      responses:
        "400":
          description: Invalid data.
        "200":
          description: Toll successfully created or updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TollDTO'
        "404":
          description: Toll with given id does not exist in DB.
  /roadNetwork:
    get:
      tags:
      - road-network-controller
      summary: Get a road network
      operationId: getRoadNetwork
      responses:
        "200":
          description: Found the road network
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoadNetworkDTO'
    post:
      tags:
      - road-network-controller
      summary: "Create or update road. When road's id == null, system creates new\
        \ road.Otherwise system gets road from DB with id == road.id and updates all\
        \ fields."
      operationId: addOrEditRoad
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoadDTO'
        required: true
      responses:
        "200":
          description: Road successfully created or updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoadDTO'
        "400":
          description: Invalid data.
        "404":
          description: Road with given id does not exist in DB.
  /payment:
    get:
      tags:
      - payment-controller
      summary: Get the payment list
      operationId: getPaymentList
      parameters:
      - name: userId
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Found the payment list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentDTO'
    post:
      tags:
      - payment-controller
      summary: "Add new Payment. When payment's id == null, system creates new payment."
      operationId: addPayment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentDTO'
        required: true
      responses:
        "400":
          description: Invalid data.
        "200":
          description: Payment successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TollDTO'
  /drive:
    post:
      tags:
      - drive-controller
      operationId: registerVehicle
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehicleDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /addSubscription:
    post:
      tags:
        - subscription-controller
      summary: Add subscription. When subscription's id == null, system will return bad request.Otherwise system adds new subscription to the database.
      operationId: addSubscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionPaymentDTO'
        required: true
      responses:
        '200':
          description: Subscription successfully added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionPaymentDTO'
        '400':
          description: Invalid data.
  /getSubscriptions:
    get:
      tags:
        - subscription-controller
      operationId: getSubscriptions
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubscriptionDTO'
  /getSubscriptionTypes:
    get:
      tags:
        - subscription-controller
      operationId: getSubscriptionTypes
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubscriptionTypeDTO'
components:
  schemas:
    TollDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        vehicleTollDTOS:
          type: array
          items:
            $ref: '#/components/schemas/VehicleTollDTO'
        roadSegments:
          type: array
          items:
            type: integer
            format: int64
    VehicleTollDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        pricePerKilometer:
          type: number
          format: float
        vehicleType:
          type: string
          enum:
          - CAR
          - TRUCK
    JunctionDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
    RoadDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        code:
          type: string
        name:
          type: string
        type:
          type: string
          enum:
          - HIGHWAY
          - NATIONAL_ROAD
          - VOIVODESHIP_ROAD
        segments:
          type: array
          items:
            $ref: '#/components/schemas/RoadSegmentDTO'
    RoadSegmentDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        length:
          type: number
          format: float
        start:
          $ref: '#/components/schemas/JunctionDTO'
        end:
          $ref: '#/components/schemas/JunctionDTO'
        toolId:
          type: integer
          format: int64
    Junction:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
    Passage:
      type: object
      properties:
        id:
          type: integer
          format: int64
        date:
          type: string
          format: date-time
        payment:
          $ref: '#/components/schemas/Payment'
        start:
          $ref: '#/components/schemas/Junction'
        end:
          $ref: '#/components/schemas/Junction'
    Payment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        paid:
          type: boolean
        price:
          type: number
          format: float
        passage:
          $ref: '#/components/schemas/Passage'
    PaymentDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        paid:
          type: boolean
        price:
          type: number
          format: float
        passage:
          $ref: '#/components/schemas/Passage'
    VehicleDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        cylinderCapacity:
          type: number
          format: double
        manufacturer:
          type: string
        model:
          type: string
        productionYear:
          type: string
          format: date-time
        registrationNumber:
          type: string
        technicalID:
          type: integer
          format: int64
        type:
          type: string
        weight:
          type: number
          format: double
        secondOwner:
          type: string
        firstOwner:
          type: string
    SubscriptionPaymentDTO:
      type: object
      properties:
        blickNumber:
          type: integer
          format: int32
        subscriptionType:
          $ref: '#/components/schemas/SubscriptionTypeDTO'
    SubscriptionTypeDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        period:
          type: integer
          format: int32
        price:
          type: number
          format: float
        type:
          type: string
          enum:
            - CAR
            - TRUCK
    RoadNetworkDTO:
      type: object
      properties:
        roadDTOS:
          type: array
          items:
            $ref: '#/components/schemas/RoadDTO'
    AppUser:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string
        vehicles:
          type: array
          items:
            $ref: '#/components/schemas/VehicleDTO'
        subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionDTO'
    SubscriptionDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        to:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/AppUser'
        type:
          $ref: '#/components/schemas/SubscriptionTypeDTO'
