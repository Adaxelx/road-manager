/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
/**
 *
 * @export
 * @interface VehicleDTO
 */
export interface VehicleDTO {
    /**
     *
     * @type {number}
     * @memberof VehicleDTO
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof VehicleDTO
     */
    cylinderCapacity?: number;
    /**
     *
     * @type {string}
     * @memberof VehicleDTO
     */
    manufacturer?: string;
    /**
     *
     * @type {string}
     * @memberof VehicleDTO
     */
    model?: string;
    /**
     *
     * @type {Date}
     * @memberof VehicleDTO
     */
    productionYear?: Date;
    /**
     *
     * @type {string}
     * @memberof VehicleDTO
     */
    registrationNumber?: string;
    /**
     *
     * @type {number}
     * @memberof VehicleDTO
     */
    technicalID?: number;
    /**
     *
     * @type {string}
     * @memberof VehicleDTO
     */
    type?: string;
    /**
     *
     * @type {number}
     * @memberof VehicleDTO
     */
    weight?: number;
    /**
     *
     * @type {string}
     * @memberof VehicleDTO
     */
    secondOwner?: string;
    /**
     *
     * @type {string}
     * @memberof VehicleDTO
     */
    firstOwner?: string;
}

/**
 * Check if a given object implements the VehicleDTO interface.
 */
export function instanceOfVehicleDTO(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function VehicleDTOFromJSON(json: any): VehicleDTO {
    return VehicleDTOFromJSONTyped(json, false);
}

export function VehicleDTOFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean
): VehicleDTO {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        id: !exists(json, "id") ? undefined : json["id"],
        cylinderCapacity: !exists(json, "cylinderCapacity")
            ? undefined
            : json["cylinderCapacity"],
        manufacturer: !exists(json, "manufacturer")
            ? undefined
            : json["manufacturer"],
        model: !exists(json, "model") ? undefined : json["model"],
        productionYear: !exists(json, "productionYear")
            ? undefined
            : new Date(json["productionYear"]),
        registrationNumber: !exists(json, "registrationNumber")
            ? undefined
            : json["registrationNumber"],
        technicalID: !exists(json, "technicalID")
            ? undefined
            : json["technicalID"],
        type: !exists(json, "type") ? undefined : json["type"],
        weight: !exists(json, "weight") ? undefined : json["weight"],
        secondOwner: !exists(json, "secondOwner")
            ? undefined
            : json["secondOwner"],
        firstOwner: !exists(json, "firstOwner")
            ? undefined
            : json["firstOwner"],
    };
}

export function VehicleDTOToJSON(value?: VehicleDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        id: value.id,
        cylinderCapacity: value.cylinderCapacity,
        manufacturer: value.manufacturer,
        model: value.model,
        productionYear:
            value.productionYear === undefined
                ? undefined
                : value.productionYear.toISOString(),
        registrationNumber: value.registrationNumber,
        technicalID: value.technicalID,
        type: value.type,
        weight: value.weight,
        secondOwner: value.secondOwner,
        firstOwner: value.firstOwner,
    };
}
