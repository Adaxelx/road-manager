/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { PaymentDTO, TollDTO } from "../models";
import {
    PaymentDTOFromJSON,
    PaymentDTOToJSON,
    TollDTOFromJSON,
    TollDTOToJSON,
} from "../models";

export interface AddOrEditToolRequest {
    tollDTO: TollDTO;
}

export interface AddPaymentRequest {
    paymentDTO: PaymentDTO;
}

export interface GetPaymentListRequest {
    userId: string;
}

/**
 *
 */
export class PaymentControllerApi extends runtime.BaseAPI {
    /**
     * Create or update toll. When toll\'s id == null, system creates new toll.Otherwise system gets toll from DB with id == toll.id and updates all fields.
     */
    async addOrEditToolRaw(
        requestParameters: AddOrEditToolRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<TollDTO>> {
        if (
            requestParameters.tollDTO === null ||
            requestParameters.tollDTO === undefined
        ) {
            throw new runtime.RequiredError(
                "tollDTO",
                "Required parameter requestParameters.tollDTO was null or undefined when calling addOrEditTool."
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        const response = await this.request(
            {
                path: `/toll`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.tollDTO,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            TollDTOFromJSON(jsonValue)
        );
    }

    /**
     * Create or update toll. When toll\'s id == null, system creates new toll.Otherwise system gets toll from DB with id == toll.id and updates all fields.
     */
    async addOrEditTool(
        tollDTO: TollDTO,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<TollDTO> {
        const response = await this.addOrEditToolRaw(
            { tollDTO: tollDTO },
            initOverrides
        );
        return await response.value();
    }

    /**
     * Add new Payment. When payment\'s id == null, system creates new payment.
     */
    async addPaymentRaw(
        requestParameters: AddPaymentRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<TollDTO>> {
        if (
            requestParameters.paymentDTO === null ||
            requestParameters.paymentDTO === undefined
        ) {
            throw new runtime.RequiredError(
                "paymentDTO",
                "Required parameter requestParameters.paymentDTO was null or undefined when calling addPayment."
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        const response = await this.request(
            {
                path: `/payment`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: PaymentDTOToJSON(requestParameters.paymentDTO),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            TollDTOFromJSON(jsonValue)
        );
    }

    /**
     * Add new Payment. When payment\'s id == null, system creates new payment.
     */
    async addPayment(
        paymentDTO: PaymentDTO,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<TollDTO> {
        const response = await this.addPaymentRaw(
            { paymentDTO: paymentDTO },
            initOverrides
        );
        return await response.value();
    }

    /**
     * Get the payment list
     */
    async getPaymentListRaw(
        requestParameters: GetPaymentListRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<Array<PaymentDTO>>> {
        if (
            requestParameters.userId === null ||
            requestParameters.userId === undefined
        ) {
            throw new runtime.RequiredError(
                "userId",
                "Required parameter requestParameters.userId was null or undefined when calling getPaymentList."
            );
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters["userId"] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/payment`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            jsonValue.map(PaymentDTOFromJSON)
        );
    }

    /**
     * Get the payment list
     */
    async getPaymentList(
        userId: string,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<Array<PaymentDTO>> {
        const response = await this.getPaymentListRaw(
            { userId: userId },
            initOverrides
        );
        return await response.value();
    }

    /**
     * Get the toll list
     */
    async getToolRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<Array<TollDTO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/toll`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            jsonValue.map(TollDTOFromJSON)
        );
    }

    /**
     * Get the toll list
     */
    async getTool(
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<Array<TollDTO>> {
        const response = await this.getToolRaw(initOverrides);
        return await response.value();
    }
}
