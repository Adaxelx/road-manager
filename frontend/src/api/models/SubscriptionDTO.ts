/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import type { AppUser } from "./AppUser";
import {
    AppUserFromJSON,
    AppUserFromJSONTyped,
    AppUserToJSON,
} from "./AppUser";
import type { SubscriptionTypeDTO } from "./SubscriptionTypeDTO";
import {
    SubscriptionTypeDTOFromJSON,
    SubscriptionTypeDTOFromJSONTyped,
    SubscriptionTypeDTOToJSON,
} from "./SubscriptionTypeDTO";

/**
 *
 * @export
 * @interface SubscriptionDTO
 */
export interface SubscriptionDTO {
    /**
     *
     * @type {number}
     * @memberof SubscriptionDTO
     */
    id?: number;
    /**
     *
     * @type {Date}
     * @memberof SubscriptionDTO
     */
    to?: Date;
    /**
     *
     * @type {AppUser}
     * @memberof SubscriptionDTO
     */
    user?: AppUser;
    /**
     *
     * @type {SubscriptionTypeDTO}
     * @memberof SubscriptionDTO
     */
    type?: SubscriptionTypeDTO;
}

/**
 * Check if a given object implements the SubscriptionDTO interface.
 */
export function instanceOfSubscriptionDTO(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SubscriptionDTOFromJSON(json: any): SubscriptionDTO {
    return SubscriptionDTOFromJSONTyped(json, false);
}

export function SubscriptionDTOFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean
): SubscriptionDTO {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        id: !exists(json, "id") ? undefined : json["id"],
        to: !exists(json, "to") ? undefined : new Date(json["to"]),
        user: !exists(json, "user") ? undefined : AppUserFromJSON(json["user"]),
        type: !exists(json, "type")
            ? undefined
            : SubscriptionTypeDTOFromJSON(json["type"]),
    };
}

export function SubscriptionDTOToJSON(value?: SubscriptionDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        id: value.id,
        to: value.to === undefined ? undefined : value.to.toISOString(),
        user: AppUserToJSON(value.user),
        type: SubscriptionTypeDTOToJSON(value.type),
    };
}
